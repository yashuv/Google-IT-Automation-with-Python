git commit -a
- shortcut to stage any changes to tracked files and commit them in one step.
- commit all changes to files that are already tracked by Git. This means that any changes to files that are not tracked by Git will not be included in the commit. for eg: Git commit -a doesn't work on new files because those are untracked.

git commit -a -m "message"
- (git commit -a) + add commit message directly.

git log -p
- display the full commit history of a repository, including the diffs of each commit. This is useful for seeing the complete history of a repository, as well as understanding the changes that have been made to the code over time.
- format is equivalent to (diff -u) output.
- The p comes from patch, because using this flag gives us the patch that was created.

git show commitID
- show git commit log of particular commitID, and its diff.

git log --stat
- display a log of commits with accompanying file statistics.

git add -p
- show us(review) the change (patch) being added and ask us if we want to stage it or not.

git diff
- shows only unstaged changes by default.

git diff --staged
- shows changes that are staged but not committed.
=======================================================
Deleting and Renaming Files:
----------------------------
ls -l
- first see the content of directory

git rm file_name
- delete the file

ls -l
- check the content again(if the file is deleted).

git status
- finally, check the status

Until here, the change is also staged to be committed in the next commit.

git commit -m "delete message"
- commit with delete message

Now, renaming:

git mv old_filename new_filename
- rename the filename

git status
- shows us that the file was renamed and clearly displays the old and new names.
- As with previous example(delete), the change is staged but not committed.

git commit -m "rename message"
- commit with renamed msg

--------

.gitignore file
-inside this file we specifie the set of rules to tell git which files to ignore(skip) when tracking changes in a repository. The command takes a single argument, which is the path to a file containing a list of patterns to ignore.

For example, if we're working on an OSX computer, we'll probably want to ignore the dot DS store file, which is automatically generated by the operating system.

echo .DS_STORE > .gitignore
- create a .gitignore file containing the name of file to ignore.

Note: The dot prefix indicates that the directory is hidden.

ls -la
- list all files(including hidden).
- check whether the above gitignore file is created.

We've added a gitignore file to our repo but we haven't committed it yet. So to track changes:
git add .gitignore
- add to staging area

git commit -m "add a gitignore file, ignoring .DS_STORE files"
- commit changes to gitignore with msg

-----------




